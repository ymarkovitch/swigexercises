/*-*- mode:swig;tab-width:4;indent-tabs-mode:nil;c-file-style:"stroustrup";c-file-offsets:((innamespace . 0)(inline-open . 0)(case-label . +)) -*-*/
/*******************************************************************************
 FILE         :   swigexercises_entities.iswg
 DESCRIPTION  :   SWIG exercises

 PROGRAMMED BY:   Yakov Markovitch
 CREATION DATE:   28 Oct 2015
*******************************************************************************/
%include "swigexercises.swg"

%module swigexercises_proxy

%naturalvar ;

%csmethodmodifiers operator bool() const "private" ;
%rename(boolCast) operator bool() const ;
%csattributes operator bool() const %{
  public static explicit operator bool($csclassname self) { return self.boolCast() ; }
  public static bool operator !($csclassname self) { return !(bool)self ; }
  public static bool operator true($csclassname self) { return (bool)self ; }
  public static bool operator false($csclassname self) { return !self ; }
%}

%{
#include <pcomn_uuid.h>
#include <pcomn_net/netaddr.h>
%}

%pragma(csharp) imclassimports=%{
  using System ;
  using System.Runtime ;
  using System.Runtime.InteropServices ;
  using System.Diagnostics ;
  using System.Collections ;
  using System.Collections.Generic ;
%}

%{
using namespace pcomn::net ;
using pcomn::MAC ;
using pcomn::uuid ;
%}

/*******************************************************************************
 GUID
*******************************************************************************/
%typemap(cstype) uuid, const uuid & "Guid"
%typemap(csin,
         pre="    ulong q1$csinput, q2$csinput ;\n"
             "    unsafe { byte[] d$csinput = $csinput.ToByteArray() ;\n"
             "      fixed (byte *q3$csinput = &d$csinput[0]) { q1$csinput = *(ulong *)q3$csinput ; q2$csinput = *((ulong *)q3$csinput + 1) ;\n"
             "    }}"
             "    uuid temp$csinput = new uuid(q1$csinput, q2$csinput) ;"
        ) uuid, const uuid &
         "$csclassname.getCPtr(temp$csinput)"

%typemap(csout, excode=SWIGEXCODE) uuid, const uuid & {
    var data = new $csclassname($imcall, true);$excode
    byte[] ret = new byte[16] ;
    Marshal.Copy($csclassname.getCPtr(data).Handle, ret, 0, 16) ;
    return new Guid(ret) ;
  }

/*
%typemap(csvarout, excode=SWIGEXCODE2) const uuid, uuid, const uuid &, uuid &, const uuid *, uuid * %{
    get {
        var data = new $csclassname($imcall, true);$excode
        [] ret = new byte[16] ;
        Marshal.Copy($csclassname.getCPtr(data).Handle, ret, 0, 16) ;
        return new Guid(ret) ;
    }
  %}
*/

struct uuid {
    uuid() ;
    %extend {
        uuid(uint64_t q1, uint64_t q2)
        {
            using namespace pcomn ;
            struct word1 { uint32_t u32 ; uint16_t u16[2] ; } ;
            PCOMN_STATIC_CHECK(sizeof(word1) == sizeof(uint64_t)) ;

            word1 * const w1 = reinterpret_cast<word1 *>(&q1) ;
            to_big_endian(w1->u32) ;
            to_big_endian(w1->u16[0]) ;
            to_big_endian(w1->u16[1]) ;

            const uint64_t data[] = { q1, q2 } ;
            return new uuid(*reinterpret_cast<const uuid *>(data + 0)) ;
        }
    }
} ;

typedef unsigned vlan_num ;
%typedef_template(unsigned_vector, std::vector<unsigned>) ;

%rename("%(camelcase)s", %$isfunction) "" ;
%rename("%(camelcase)s", %$isvariable) "" ;
%rename("%s") "network" ;

%rename_noprefix_camelcase(%$isenumitem, regextarget=1) FFNDX ;

enum FilterFieldNdx {
    FFNDX_PROTO,
    FFNDX_SRC_ADDR,
    FFNDX_DST_ADDR,
    FFNDX_SRC_PORT,
    FFNDX_DST_PORT
} ;

#define %rproperty(type, method) %property(%arg(type), method, method)
#define %rpropertyval(type, method) %propertyval(%arg(type), method, method)

/*******************************************************************************
 pcomn::net::inet_address
*******************************************************************************/
struct inet_address {
    %properties(inet_address) ;

    enum ConstructFlags {
        IGNORE_HOSTNAME = 0x0001,
        IGNORE_DOTDEC   = 0x0002,
        ALLOW_EMPTY     = 0x0008,
        NO_EXCEPTION    = 0x1000,

        ONLY_HOSTNAME   = IGNORE_DOTDEC,
        ONLY_DOTDEC     = IGNORE_HOSTNAME
    } ;

    inet_address() ;
    explicit inet_address(uint32_t host_order_inetaddr) ;
    inet_address(uint8_t a, uint8_t b, uint8_t c, uint8_t d) ;
    inet_address(const std::string &address_string, unsigned flags = 0) ;

    operator bool() const noexcept ;

    %property(uint32_t, IpAddr, ipaddr) ;

    %propertyval(inet_address, Next, next) ;
    %propertyval(inet_address, Prev, prev) ;
    static inet_address last() ;

    %property(std::string, HostName, hostname) ;
    %rproperty(std::string, dotted_decimal) ;
    %endproperties() ;

    %ToString(str) ;
} ;

%inline {typedef inet_address inet_address_ ;}

/*******************************************************************************
 address_pair
*******************************************************************************/
%typedef_template(address_pair, std::pair<inet_address_, inet_address_>) ;

/*******************************************************************************
 pcomn::net::subnet_address
*******************************************************************************/
struct subnet_address {
    %properties(subnet_address) ;

    subnet_address() ;
    subnet_address(uint32_t host_order_inetaddr, unsigned prefix_length) ;
    subnet_address(const inet_address_ &address, unsigned prefix_length) ;
    subnet_address(uint8_t a, uint8_t b, uint8_t c, uint8_t d, unsigned prefix_length) ;
    subnet_address(const std::string &subnet_string) ;

    operator bool() const ;
    operator inet_address_() const ;

    %ToString(str)

    %property(unsigned, PrefixLength, pfxlen) ;
    %property(uint32_t, SubnetMask, netmask) ;

    %propertyval(inet_address_, addr, addr) ;
    %propertyval(subnet_address, subnet, subnet) ;
    %propertyval(address_pair, addr_range, addr_range) ;

    %property(bool, is_host, is_host) ;
    %property(bool, is_any, is_any) ;
    %endproperties() ;
} ;

/*******************************************************************************
 pcomn::MAC
*******************************************************************************/
struct MAC {
    MAC() ;
    MAC(uint8_t o1, uint8_t o2, uint8_t o3, uint8_t o4, uint8_t o5, uint8_t o6) ;
    MAC(const char *str) ;

    operator bool() const ;
    unsigned octet(unsigned n) const ;

    %ToString(to_string) ;

    %properties(MAC) ;
    %property(size_t, hash, hash) ;
    %endproperties() ;
} ;

/*******************************************************************************
 Ex
*******************************************************************************/
struct Ppp ;

struct Ppp {
    %properties(Ppp) ;
    MAC make_mac(const std::string &str) const
    {
        return MAC(str) ;
    }

    uuid make_id(const std::string &str) const { return pcomn::uuid(str) ; }
    %endproperties() ;
} ;


%feature("novaluewrapper") PppP ;
%pcomn_shared_intrusive_ptr(Ppp)
typedef pcomn::shared_intrusive_ptr<Ppp> PppP ;

struct Interesting {
    %properties(Interesting) ;

    PppP pello() const ;
    const PppP &pello_ref() const ;
    void put_pello_ref(const PppP &) const ;
    void put_pello(PppP) const ;

    %endproperties() ;
} ;
